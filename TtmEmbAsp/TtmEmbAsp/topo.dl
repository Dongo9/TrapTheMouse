val(0..8).

cell(R,C) :- val(R), val(C).

even(X) :- val(X), #mod(X,2,0).

odd(X) :- val(X), not even(X).

adjacent(R1,C1,R2,C2) :- cell(R1,C1), cell(R2,C2), R1=R2, C2=C1+1.

adjacent(R1,C1,R2,C2) :- cell(R1,C1), cell(R2,C2), R1=R2, C2=C1-1.

adjacent(R1,C1,R2,C2) :- even(R1), cell(R1,C1), cell(R2,C2), R2=R1-1, C2=C1-1.

adjacent(R1,C1,R2,C2) :- even(R1), cell(R1,C1), cell(R2,C2), R2=R1-1, C2=C1.

adjacent(R1,C1,R2,C2) :- even(R1), cell(R1,C1), cell(R2,C2), R2=R1+1, C2=C1-1.

adjacent(R1,C1,R2,C2) :- even(R1), cell(R1,C1), cell(R2,C2), R2=R1+1, C2=C1.

adjacent(R1,C1,R2,C2) :- odd(R1), cell(R1,C1), cell(R2,C2), R2=R1-1, C2=C1.

adjacent(R1,C1,R2,C2) :- odd(R1), cell(R1,C1), cell(R2,C2), R2=R1-1, C2=C1+1.

adjacent(R1,C1,R2,C2) :- odd(R1), cell(R1,C1), cell(R2,C2), R2=R1+1, C2=C1.

adjacent(R1,C1,R2,C2) :- odd(R1), cell(R1,C1), cell(R2,C2), R2=R1+1, C2=C1+1.

maxVal(M) :- #max{ X : val(X) }=M.

minVal(Min) :- #min{ X : val(X) } = Min.

edge(R,C) :- cell(R,C), minVal(R).

edge(R,C) :- cell(R,C), maxVal(R).

edge(R,C) :- cell(R,C), minVal(C).

edge(R,C) :- cell(R,C), maxVal(C).

inPath(R1,C1,R2,C2) | outPath(R1,C1,R2,C2) :- adjacent(R1,C1,R2,C2), not muro(R2,C2).

reached(R,C) :- mouse(R1,C1), inPath(R1,C1,R,C).

reached(R,C) :- reached(R1,C1), inPath(R1,C1,R,C).

goal(1) :-  reached(R,C), edge(R,C).

:- #count{ X : goal(X) } < 1.

:~ inPath(R1,C1,R2,C2). [1:1]

:~ inPath(_,_,R1,C1), wall(R3,C3), adjacent(R1,C1,R3,C3). [2:1]

scelgo(R,C) :- inPath(R1,C1,R,C), topo(R1,C1).